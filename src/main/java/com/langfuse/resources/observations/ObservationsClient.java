/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.observations;

import com.fasterxml.jackson.core.JsonProcessingException;
import core.ClientOptions;
import core.LangfuseLangfuseApiException;
import core.LangfuseLangfuseException;
import core.ObjectMappers;
import core.QueryStringMapper;
import core.RequestOptions;
import java.io.IOException;
import java.lang.Object;
import java.lang.String;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;
import resources.commons.errors.AccessDeniedError;
import resources.commons.errors.Error;
import resources.commons.errors.MethodNotAllowedError;
import resources.commons.errors.NotFoundError;
import resources.commons.errors.UnauthorizedError;
import resources.commons.types.ObservationsView;
import resources.observations.requests.GetObservationsRequest;
import resources.observations.types.ObservationsViews;

public class ObservationsClient {
  protected final ClientOptions clientOptions;

  public ObservationsClient(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
  }

  /**
   * Get a observation
   */
  public ObservationsView get(String observationId) {
    return get(observationId,null);
  }

  /**
   * Get a observation
   */
  public ObservationsView get(String observationId, RequestOptions requestOptions) {
    HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()
      .addPathSegments("api/public")
      .addPathSegments("observations")
      .addPathSegment(observationId)
      .build();
    Request okhttpRequest = new Request.Builder()
      .url(httpUrl)
      .method("GET", null)
      .headers(Headers.of(clientOptions.headers(requestOptions)))
      .addHeader("Content-Type", "application/json")
      .addHeader("Accept", "application/json")
      .build();
    OkHttpClient client = clientOptions.httpClient();
    if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
      client = clientOptions.httpClientWithTimeout(requestOptions);
    }
    try (Response response = client.newCall(okhttpRequest).execute()) {
      ResponseBody responseBody = response.body();
      if (response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ObservationsView.class);
      }
      String responseBodyString = responseBody != null ? responseBody.string() : "{}";
      try {
        switch (response.code()) {
          case 400:throw new Error(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          case 403:throw new AccessDeniedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          case 404:throw new NotFoundError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          case 405:throw new MethodNotAllowedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
        }
      }
      catch (JsonProcessingException ignored) {
        // unable to map error response, throwing generic error
      }
      throw new LangfuseLangfuseApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
    }
    catch (IOException e) {
      throw new LangfuseLangfuseException("Network error executing HTTP request", e);
    }
  }

  /**
   * Get a list of observations
   */
  public ObservationsViews getMany() {
    return getMany(GetObservationsRequest.builder().build());
  }

  /**
   * Get a list of observations
   */
  public ObservationsViews getMany(GetObservationsRequest request) {
    return getMany(request,null);
  }

  /**
   * Get a list of observations
   */
  public ObservationsViews getMany(GetObservationsRequest request, RequestOptions requestOptions) {
    HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()
      .addPathSegments("api/public")
      .addPathSegments("observations");if (request.getPage().isPresent()) {
        QueryStringMapper.addQueryParameter(httpUrl, "page", request.getPage().get().toString(), false);
      }
      if (request.getLimit().isPresent()) {
        QueryStringMapper.addQueryParameter(httpUrl, "limit", request.getLimit().get().toString(), false);
      }
      if (request.getName().isPresent()) {
        QueryStringMapper.addQueryParameter(httpUrl, "name", request.getName().get(), false);
      }
      if (request.getUserId().isPresent()) {
        QueryStringMapper.addQueryParameter(httpUrl, "userId", request.getUserId().get(), false);
      }
      if (request.getType().isPresent()) {
        QueryStringMapper.addQueryParameter(httpUrl, "type", request.getType().get(), false);
      }
      if (request.getTraceId().isPresent()) {
        QueryStringMapper.addQueryParameter(httpUrl, "traceId", request.getTraceId().get(), false);
      }
      if (request.getParentObservationId().isPresent()) {
        QueryStringMapper.addQueryParameter(httpUrl, "parentObservationId", request.getParentObservationId().get(), false);
      }
      if (request.getEnvironment().isPresent()) {
        QueryStringMapper.addQueryParameter(httpUrl, "environment", request.getEnvironment().get(), false);
      }
      if (request.getFromStartTime().isPresent()) {
        QueryStringMapper.addQueryParameter(httpUrl, "fromStartTime", request.getFromStartTime().get().toString(), false);
      }
      if (request.getToStartTime().isPresent()) {
        QueryStringMapper.addQueryParameter(httpUrl, "toStartTime", request.getToStartTime().get().toString(), false);
      }
      if (request.getVersion().isPresent()) {
        QueryStringMapper.addQueryParameter(httpUrl, "version", request.getVersion().get(), false);
      }
      Request.Builder _requestBuilder = new Request.Builder()
        .url(httpUrl.build())
        .method("GET", null)
        .headers(Headers.of(clientOptions.headers(requestOptions)))
        .addHeader("Content-Type", "application/json")
        .addHeader("Accept", "application/json");
      Request okhttpRequest = _requestBuilder.build();
      OkHttpClient client = clientOptions.httpClient();
      if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
        client = clientOptions.httpClientWithTimeout(requestOptions);
      }
      try (Response response = client.newCall(okhttpRequest).execute()) {
        ResponseBody responseBody = response.body();
        if (response.isSuccessful()) {
          return ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ObservationsViews.class);
        }
        String responseBodyString = responseBody != null ? responseBody.string() : "{}";
        try {
          switch (response.code()) {
            case 400:throw new Error(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
            case 401:throw new UnauthorizedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
            case 403:throw new AccessDeniedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
            case 404:throw new NotFoundError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
            case 405:throw new MethodNotAllowedError(ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
          }
        }
        catch (JsonProcessingException ignored) {
          // unable to map error response, throwing generic error
        }
        throw new LangfuseLangfuseApiException("Error with status code " + response.code(), response.code(), ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class));
      }
      catch (IOException e) {
        throw new LangfuseLangfuseException("Network error executing HTTP request", e);
      }
    }
  }
