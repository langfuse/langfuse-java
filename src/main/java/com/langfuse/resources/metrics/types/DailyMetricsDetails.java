/**
 * This file was auto-generated by Fern from our API Definition.
 */

package resources.metrics.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = DailyMetricsDetails.Builder.class
)
public final class DailyMetricsDetails {
  private final String date;

  private final int countTraces;

  private final int countObservations;

  private final double totalCost;

  private final List<UsageByModel> usage;

  private final Map<String, Object> additionalProperties;

  private DailyMetricsDetails(String date, int countTraces, int countObservations, double totalCost,
      List<UsageByModel> usage, Map<String, Object> additionalProperties) {
    this.date = date;
    this.countTraces = countTraces;
    this.countObservations = countObservations;
    this.totalCost = totalCost;
    this.usage = usage;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("date")
  public String getDate() {
    return date;
  }

  @JsonProperty("countTraces")
  public int getCountTraces() {
    return countTraces;
  }

  @JsonProperty("countObservations")
  public int getCountObservations() {
    return countObservations;
  }

  /**
   * @return Total model cost in USD
   */
  @JsonProperty("totalCost")
  public double getTotalCost() {
    return totalCost;
  }

  @JsonProperty("usage")
  public List<UsageByModel> getUsage() {
    return usage;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof DailyMetricsDetails && equalTo((DailyMetricsDetails) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(DailyMetricsDetails other) {
    return date.equals(other.date) && countTraces == other.countTraces && countObservations == other.countObservations && totalCost == other.totalCost && usage.equals(other.usage);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.date, this.countTraces, this.countObservations, this.totalCost, this.usage);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static DateStage builder() {
    return new Builder();
  }

  public interface DateStage {
    CountTracesStage date(@NotNull String date);

    Builder from(DailyMetricsDetails other);
  }

  public interface CountTracesStage {
    CountObservationsStage countTraces(int countTraces);
  }

  public interface CountObservationsStage {
    TotalCostStage countObservations(int countObservations);
  }

  public interface TotalCostStage {
    _FinalStage totalCost(double totalCost);
  }

  public interface _FinalStage {
    DailyMetricsDetails build();

    _FinalStage usage(List<UsageByModel> usage);

    _FinalStage addUsage(UsageByModel usage);

    _FinalStage addAllUsage(List<UsageByModel> usage);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements DateStage, CountTracesStage, CountObservationsStage, TotalCostStage, _FinalStage {
    private String date;

    private int countTraces;

    private int countObservations;

    private double totalCost;

    private List<UsageByModel> usage = new ArrayList<>();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(DailyMetricsDetails other) {
      date(other.getDate());
      countTraces(other.getCountTraces());
      countObservations(other.getCountObservations());
      totalCost(other.getTotalCost());
      usage(other.getUsage());
      return this;
    }

    @java.lang.Override
    @JsonSetter("date")
    public CountTracesStage date(@NotNull String date) {
      this.date = Objects.requireNonNull(date, "date must not be null");
      return this;
    }

    @java.lang.Override
    @JsonSetter("countTraces")
    public CountObservationsStage countTraces(int countTraces) {
      this.countTraces = countTraces;
      return this;
    }

    @java.lang.Override
    @JsonSetter("countObservations")
    public TotalCostStage countObservations(int countObservations) {
      this.countObservations = countObservations;
      return this;
    }

    /**
     * <p>Total model cost in USD</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @java.lang.Override
    @JsonSetter("totalCost")
    public _FinalStage totalCost(double totalCost) {
      this.totalCost = totalCost;
      return this;
    }

    @java.lang.Override
    public _FinalStage addAllUsage(List<UsageByModel> usage) {
      this.usage.addAll(usage);
      return this;
    }

    @java.lang.Override
    public _FinalStage addUsage(UsageByModel usage) {
      this.usage.add(usage);
      return this;
    }

    @java.lang.Override
    @JsonSetter(
        value = "usage",
        nulls = Nulls.SKIP
    )
    public _FinalStage usage(List<UsageByModel> usage) {
      this.usage.clear();
      this.usage.addAll(usage);
      return this;
    }

    @java.lang.Override
    public DailyMetricsDetails build() {
      return new DailyMetricsDetails(date, countTraces, countObservations, totalCost, usage, additionalProperties);
    }
  }
}
