/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.langfuse.client.resources.commons.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.langfuse.client.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = ModelPrice.Builder.class
)
public final class ModelPrice {
  private final double price;

  private final Map<String, Object> additionalProperties;

  private ModelPrice(double price, Map<String, Object> additionalProperties) {
    this.price = price;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("price")
  public double getPrice() {
    return price;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof ModelPrice && equalTo((ModelPrice) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(ModelPrice other) {
    return price == other.price;
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.price);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static PriceStage builder() {
    return new Builder();
  }

  public interface PriceStage {
    _FinalStage price(double price);

    Builder from(ModelPrice other);
  }

  public interface _FinalStage {
    ModelPrice build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements PriceStage, _FinalStage {
    private double price;

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(ModelPrice other) {
      price(other.getPrice());
      return this;
    }

    @java.lang.Override
    @JsonSetter("price")
    public _FinalStage price(double price) {
      this.price = price;
      return this;
    }

    @java.lang.Override
    public ModelPrice build() {
      return new ModelPrice(price, additionalProperties);
    }
  }
}
