/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.langfuse.client.resources.annotationqueues.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.langfuse.client.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = UpdateAnnotationQueueItemRequest.Builder.class
)
public final class UpdateAnnotationQueueItemRequest {
  private final Optional<AnnotationQueueStatus> status;

  private final Map<String, Object> additionalProperties;

  private UpdateAnnotationQueueItemRequest(Optional<AnnotationQueueStatus> status,
      Map<String, Object> additionalProperties) {
    this.status = status;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("status")
  public Optional<AnnotationQueueStatus> getStatus() {
    return status;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof UpdateAnnotationQueueItemRequest && equalTo((UpdateAnnotationQueueItemRequest) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(UpdateAnnotationQueueItemRequest other) {
    return status.equals(other.status);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.status);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<AnnotationQueueStatus> status = Optional.empty();

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    public Builder from(UpdateAnnotationQueueItemRequest other) {
      status(other.getStatus());
      return this;
    }

    @JsonSetter(
        value = "status",
        nulls = Nulls.SKIP
    )
    public Builder status(Optional<AnnotationQueueStatus> status) {
      this.status = status;
      return this;
    }

    public Builder status(AnnotationQueueStatus status) {
      this.status = Optional.ofNullable(status);
      return this;
    }

    public UpdateAnnotationQueueItemRequest build() {
      return new UpdateAnnotationQueueItemRequest(status, additionalProperties);
    }
  }
}
