/**
 * This file was auto-generated by Fern from our API Definition.
 */

package com.langfuse.client.resources.projects.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.langfuse.client.core.ObjectMappers;
import java.lang.Object;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(
    builder = ProjectDeletionResponse.Builder.class
)
public final class ProjectDeletionResponse {
  private final boolean success;

  private final String message;

  private final Map<String, Object> additionalProperties;

  private ProjectDeletionResponse(boolean success, String message,
      Map<String, Object> additionalProperties) {
    this.success = success;
    this.message = message;
    this.additionalProperties = additionalProperties;
  }

  @JsonProperty("success")
  public boolean getSuccess() {
    return success;
  }

  @JsonProperty("message")
  public String getMessage() {
    return message;
  }

  @java.lang.Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof ProjectDeletionResponse && equalTo((ProjectDeletionResponse) other);
  }

  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return this.additionalProperties;
  }

  private boolean equalTo(ProjectDeletionResponse other) {
    return success == other.success && message.equals(other.message);
  }

  @java.lang.Override
  public int hashCode() {
    return Objects.hash(this.success, this.message);
  }

  @java.lang.Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static SuccessStage builder() {
    return new Builder();
  }

  public interface SuccessStage {
    MessageStage success(boolean success);

    Builder from(ProjectDeletionResponse other);
  }

  public interface MessageStage {
    _FinalStage message(@NotNull String message);
  }

  public interface _FinalStage {
    ProjectDeletionResponse build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements SuccessStage, MessageStage, _FinalStage {
    private boolean success;

    private String message;

    @JsonAnySetter
    private Map<String, Object> additionalProperties = new HashMap<>();

    private Builder() {
    }

    @java.lang.Override
    public Builder from(ProjectDeletionResponse other) {
      success(other.getSuccess());
      message(other.getMessage());
      return this;
    }

    @java.lang.Override
    @JsonSetter("success")
    public MessageStage success(boolean success) {
      this.success = success;
      return this;
    }

    @java.lang.Override
    @JsonSetter("message")
    public _FinalStage message(@NotNull String message) {
      this.message = Objects.requireNonNull(message, "message must not be null");
      return this;
    }

    @java.lang.Override
    public ProjectDeletionResponse build() {
      return new ProjectDeletionResponse(success, message, additionalProperties);
    }
  }
}
